<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="MAIN" Id="{bbe2a781-9716-4ff3-acb6-ab90a53caf93}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	//Module C1A2
	Semephore : SemephoreV1(argIo:= ADR(gvl.ioControl));
	//Stations
	Controller : RunUnitController(argParent:= ADR(Controller), 
								argSlotBase:= 0, 
								argSlotLast:= 0,
								argPbGreen := ADR(gvl.signalControls[H2Green]),
								argPbRed:= ADR(gvl.signalControls[H1Red]),
								argPbYellow := ADR(gvl.signalControls[H3Orange]),
									argInterfaceControl := ADR(gvl.interfaceControl),
									argInterfaceManual := ADR(gvl.InterfaceManual));
	ConveyorProxy : RunUnitIndexerMaster(argParent:= ADR(Controller), 
												argSlotBase:= 0, 
												argSlotLast:= 0,
												argAxis:=0,
												argUpstream:=0);
	//---------------------------------------
	//	
	//---------------------------------------											
	LinearTransporter : RunUnitCellularC(argParent:= ADR(Controller), 
										argSlotBase:= ADR(GVL.materialSlots[materialTransporter]), 
										argSlotLast:= ADR(GVL.materialSlots[materialTransporter]),
										argUpstream := ADR(ConveyorProxy),
										argLinear := ADR(GVL.axisControls[CMs1Linear]),
										argRotator := ADR(GVL.axisControls[CMs2Rotator]),
										argReachSensor := ADR(gvl.signalControls[CSp1]),
										argInterfereSensor := ADR(gvl.signalControls[13]),
										argHolderCylinder := ADR(gvl.cylinderControls[CCy1]),
										argPusherCylinder := ADR(gvl.cylinderControls[CCy2]));
	//-----------------------------------
	//
	//-----------------------------------
	ConveyorMasterA : RunUnitCellularA(argParent:= ADR(Controller), 
												argSlotBase:= ADR(GVL.materialSlots[materialA1]), 
												argSlotLast:= ADR(GVL.materialSlots[materialA3]),
												argUpstream:=ADR(LinearTransporter),
												argAxis := ADR(GVL.axisControls[Ms1Conveyor]));
	LifterCellularA : ARRAY[1..3] OF RunLifterCelluar(argParent:= ADR(ConveyorMasterA),
										argSlotBase:= 0, 
									argSlotLast:= 0,
									argAxisVertical:= 0,
									argAxisHorizon := 0,
									argCylinder:=0,		
									argObstacleSensor:= 0,
									argReachSensor:= 0);
	BottomInspection : RunBottomView(argParent:= ADR(ConveyorMasterA), 
									argSlotBase:= ADR(GVL.materialSlots[materialA1]), 
									argSlotLast:= ADR(GVL.materialSlots[materialA1]),
									argWorkingSignal := ADR(LifterCellularA[1].slaveWorkingSignal[1]),
									argAxis1 := ADR(GVL.axisControls[FMs2BottomVertical]),
									argAxis2 := ADR(GVL.axisControls[FMs1BottomHorizon]),
									argSideAligner := 0,
									argConnectorHolder := ADR(gvl.cylinderControls[FCy02]),
									argTransporter := ADR(gvl.cylinderControls[FCy01]),
									argOpenClamp := ADR(gvl.cylinderControls[FCy03]));
	TopInspection : RunAxisAoiView(argParent:= ADR(Controller), 
												argSlotBase:= ADR(GVL.materialSlots[materialA2]), 
												argSlotLast:= ADR(GVL.materialSlots[materialA2]),
												argWorkingSignal := ADR(LifterCellularA[2].slaveWorkingSignal[1]),
												argAxis1 := ADR(GVL.axisControls[EMs2TopVertical]), //vertical
												argAxis2 := ADR(GVL.axisControls[EMs1TopHorizon]),
												argSideAligner := ADR(GVL.cylinderControls[ECy01]));
	BottomHandshaking : RunAoiHandshaking(argParent:= 0, 
										argSlotBase:= ADR(GVL.materialSlots[materialA1]), 
										argSlotLast:= ADR(GVL.materialSlots[materialA1]),
										argWorkingSignal := ADR(BottomInspection.slaveWorkingSignal[1]));
	TopHandshaking : RunAoiHandshaking(argParent:= 0, 
										argSlotBase:= ADR(GVL.materialSlots[materialA2]), 
										argSlotLast:= ADR(GVL.materialSlots[materialA2]),
										argWorkingSignal := ADR(TopInspection.slaveWorkingSignal[1]));
	//-------------------------
																							
	nCounter : INT; //comment
	
	//-----------------------------------
	localMaterialRemains : INT;	
	fbAdsSyncWriteRemainCount : FB_WriteAdsSymByName;
	pollingTimer : TON;
END_VAR
VAR CONSTANT
	//Axis
	Ms1Conveyor : INT :=1;
Ms2Shift1 : INT :=2;
Ms3Shift2 : INT :=3;
Ms4Shift3 : INT :=4;
Ms5Lift1 : INT :=5;
Ms6Lift2 : INT :=6;
Ms7Lift3 : INT :=7;
FMs1BottomHorizon : INT :=8;
FMs2BottomVertical : INT :=9;
EMs1TopHorizon : INT :=10;
EMs2TopVertical : INT :=11;
CMs1Linear : INT :=12;
CMs2Rotator : INT :=13;

	//Cylinders
	Cy01 : INT :=1;
Cy02 : INT :=2;
Cy03 : INT :=3;
ECy01 : INT :=10;	//Top , side aligner
FCy04 : INT :=9;	//redundant
CCy1 : INT :=7;
CCy2 : INT :=8;
FCy01 : INT :=4;	//Bottom , transporter
FCy02 : INT :=5;	//Bottom , connector holder
FCy03 : INT :=6;	//Bottom , open clamper
	//Signals
	H1Red : INT := 1;
H2Green : INT := 2;
H3Orange : INT := 3;
H4White : INT := 4;
Air : INT := 5;
SfA01 : INT := 6;
SfA02 : INT := 7;
SfA03 : INT := 8;
SpA01 : INT := 9;
SpA02 : INT := 10;
SpA03 : INT := 11;
CSp1 : INT := 12;
	//Material slots
	materialTransporter : INT :=1;
	materialA1 : INT :=2;
	materialA2 : INT :=3;
	materialA3 : INT :=4;
END_VAR
VAR PERSISTENT
	netId : T_AmsNetID;
	port : T_AmsPort := 851; //Tc3
	
	varNameRemainCount : STRING;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL.ioSafety.safeAck AND NOT GVL.ioSafety.safeComErr THEN
	GVL.ioSafety.safeAck := FALSE;
	GVL.ioSafety.safeRun := TRUE;
ELSIF NOT GVL.ioSafety.safeAck AND GVL.ioSafety.safeComErr THEN
	GVL.ioSafety.safeAck := TRUE;
	GVL.ioSafety.safeRun := FALSE;
END_IF
//
IF NOT GVL.bObjectsLinked THEN
	//link
	gvl.stations[1] := ADR(LinearTransporter);
	gvl.stations[2] := ADR(ConveyorMasterA);
	gvl.stations[3] := ADR(LifterCellularA[1]);
	gvl.stations[4] := ADR(LifterCellularA[2]);
	gvl.stations[5] := ADR(LifterCellularA[3]);
	
	gvl.stations[6] := ADR(BottomInspection);
	gvl.stations[7] := ADR(TopInspection);
	
	gvl.stations[8] := ADR(BottomHandshaking);
	gvl.stations[9] := ADR(TopHandshaking);
	
	FOR nCounter:=0 TO 2 BY 1 DO
		LifterCellularA[nCounter+1].FB_init(bInitRetains:= FALSE, 
		bInCopyCode:= FALSE, 
		argParent:= ADR(Controller), 
		argSlotBase:= ADR(gvl.materialSlots[materialA1+nCounter]), 
		argSlotLast:= ADR(gvl.materialSlots[materialA1+nCounter]), 
		argAxisVertical:= ADR(gvl.axisControls[Ms5Lift1+nCounter]),
		argAxisHorizon := ADR(gvl.axisControls[Ms2Shift1+nCounter]),
		argCylinder:= ADR(gvl.cylinderControls[Cy01+nCounter]),  
		argObstacleSensor:=ADR(gvl.signalControls[SfA01+nCounter]) , 
		argReachSensor:= ADR(gvl.signalControls[SpA01+nCounter]));
	END_FOR
	
	gvl.bObjectsLinked := TRUE; //self-locked
END_IF
//control tower light/button light
Semephore(currentMode:= Controller.currentMode, 
			isError:= Controller.isError, 
			isInitializing:= Controller.isInitializing);

ConveyorProxy(
	bEnStep:= , 
	bTrigStep:= , 
	bPause:= , 
	bIsBypassed:= , 
	bWorkingOverride:= , 
	bMaterialOverride:= , 
	slaveWorkingSignal:= , 
	State=> , 
	NextState=> , 
	AlarmCode=> );
Controller();//execute
//------------------
//ConveyorA linkage
//------------------
ConveyorMasterA.allHit := TRUE;
ConveyorMasterA.allReach := TRUE;
ConveyorMasterA.allRelease := TRUE;
FOR nCounter := 1 TO 3 BY 1 DO
	LifterCellularA[nCounter].IsHit := ConveyorMasterA.triggerHit;
	LifterCellularA[nCounter].IsReleased := ConveyorMasterA.triggerRelease;
	//link
	ConveyorMasterA.allHit := ConveyorMasterA.allHit AND LifterCellularA[nCounter].IsHit;
	ConveyorMasterA.allReach := ConveyorMasterA.allReach AND LifterCellularA[nCounter].IsReach;
	ConveyorMasterA.allRelease := ConveyorMasterA.allRelease AND LifterCellularA[nCounter].IsReleased;
END_FOR
//-----------------------
//	Report material count
//-----------------------
localMaterialRemains := 0;
FOR nCounter:=1 TO 4 BY 1 DO
	IF gvl.materialSlots[nCounter].Valid THEN
		localMaterialRemains := localMaterialRemains +1;
	END_IF
END_FOR
fbAdsSyncWriteRemainCount(
	bWrite:= pollingTimer.Q, 
	sNetId:= netId, 
	nPort:= port, 
	sVarName:= varNameRemainCount, 
	nSrcAddr:= ADR(localMaterialRemains), 
	nLen:= SIZEOF(localMaterialRemains), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> );
pollingTimer(IN:= NOT pollingTimer.Q, PT:= T#100MS, Q=> , ET=> );]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1504" Count="88" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>